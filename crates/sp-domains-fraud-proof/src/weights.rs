use crate::fraud_proof_v1::{FraudProofV1, FraudProofVariantV1};
use sp_domains::InvalidBundleType;
use sp_runtime::traits::Header as HeaderT;
use sp_weights::Weight;

pub fn fraud_proof_verification_weights<Number, Hash, DomainHeader: HeaderT, MmrHash>(
    fp: &FraudProofV1<Number, Hash, DomainHeader, MmrHash>,
) -> Weight {
    let mut weight = match &fp.proof {
        FraudProofVariantV1::InvalidStateTransition(_) => {
            invalid_state_transition_proof_verification()
        }
        FraudProofVariantV1::ValidBundle(_) => valid_bundle_proof_verification(),
        FraudProofVariantV1::InvalidExtrinsicsRoot(_) => {
            invalid_domain_extrinsics_root_fraud_proof()
        }
        FraudProofVariantV1::InvalidDomainBlockHash(_) => {
            invalid_domain_block_hash_fraud_proof_verification()
        }
        FraudProofVariantV1::InvalidBlockFees(_) => invalid_block_fees_fraud_proof_verification(),
        FraudProofVariantV1::InvalidTransfers(_) => invalid_transfers_fraud_proof_verification(),
        FraudProofVariantV1::InvalidBundles(p) => match p.invalid_bundle_type() {
            InvalidBundleType::UndecodableTx(_) => {
                invalid_bundle_undecodable_tx_fraud_proof_verification()
            }
            InvalidBundleType::OutOfRangeTx(_) => {
                invalid_bundle_out_of_range_tx_fraud_proof_verification()
            }
            InvalidBundleType::IllegalTx(_) => invalid_bundle_illegal_tx_fraud_proof_verification(),
            InvalidBundleType::InvalidXDM(_) => {
                invalid_bundle_invalid_xdm_fraud_proof_verification()
            }
            InvalidBundleType::InherentExtrinsic(_) => {
                invalid_bundle_inherent_extrinsic_fraud_proof_verification()
            }
            InvalidBundleType::InvalidBundleWeight => {
                invalid_bundle_weight_fraud_proof_verification()
            }
        },
        #[cfg(any(feature = "std", feature = "runtime-benchmarks"))]
        FraudProofVariantV1::Dummy => Weight::zero(),
    };
    if fp.maybe_mmr_proof.is_some() {
        weight = weight.saturating_add(consensus_state_root_mmr_proof_verification());
    }
    if fp.maybe_domain_runtime_code_proof.is_some() {
        weight = weight.saturating_add(domain_runtime_code_proof_verification());
    }
    weight
}

fn consensus_state_root_mmr_proof_verification() -> Weight {
    // Verification time is around 2_022_700 pico seconds
    // Generated by the `mmr_proof_and_runtime_code_proof_verification` bench
    Weight::from_parts(2_022_700, 0)
}

fn domain_runtime_code_proof_verification() -> Weight {
    // Verification time is around 2_022_700 pico seconds
    // Generated by the `mmr_proof_and_runtime_code_proof_verification` bench
    Weight::from_parts(925_650_000, 0)
}

fn invalid_state_transition_proof_verification() -> Weight {
    // Verification time is around 359_040_000 pico seconds
    // Generated by the `invalid_state_transition_proof_verification` bench
    Weight::from_parts(359_040_000, 0)
}

fn valid_bundle_proof_verification() -> Weight {
    // Verification time is around 754_330_000 pico seconds
    // Generated by the `valid_bundle_proof_verification` bench
    Weight::from_parts(754_330_000, 0)
}

fn invalid_domain_extrinsics_root_fraud_proof() -> Weight {
    // Verification time is around 1_495_800_000 pico seconds
    // Generated by the `invalid_domain_extrinsics_root_fraud_proof` bench
    Weight::from_parts(1_495_800_000, 0)
}

fn invalid_domain_block_hash_fraud_proof_verification() -> Weight {
    // Verification time is around 5_929_100 pico seconds
    // Generated by the `invalid_domain_block_hash_fraud_proof_verification` bench
    Weight::from_parts(5_929_100, 0)
}

fn invalid_block_fees_fraud_proof_verification() -> Weight {
    // Verification time is around 746_860_000 pico seconds
    // Generated by the `invalid_block_fees_fraud_proof_verification` bench
    Weight::from_parts(746_860_000, 0)
}

fn invalid_transfers_fraud_proof_verification() -> Weight {
    // Verification time is around 744_740_000 pico seconds
    // Generated by the `invalid_transfers_fraud_proof_verification` bench
    Weight::from_parts(744_740_000, 0)
}

fn invalid_bundle_undecodable_tx_fraud_proof_verification() -> Weight {
    // Verification time is around 751_320_000 pico seconds
    // Generated by the `invalid_bundle_undecodable_tx_fraud_proof_verification` bench
    Weight::from_parts(751_320_000, 0)
}

fn invalid_bundle_out_of_range_tx_fraud_proof_verification() -> Weight {
    // Verification time is around 745_380_000 pico seconds
    // Generated by the `invalid_bundle_out_of_range_tx_fraud_proof_verification` bench
    Weight::from_parts(745_380_000, 0)
}

fn invalid_bundle_illegal_tx_fraud_proof_verification() -> Weight {
    // Verification time is around 198_720_000 pico seconds
    // Generated by the `invalid_bundle_out_of_range_tx_fraud_proof_verification` bench
    Weight::from_parts(198_720_000, 0)
}

fn invalid_bundle_invalid_xdm_fraud_proof_verification() -> Weight {
    // Verification time is around 750_950_000 pico seconds
    // Generated by the `invalid_bundle_invalid_xdm_fraud_proof_verification` bench
    Weight::from_parts(750_950_000, 0)
}

fn invalid_bundle_inherent_extrinsic_fraud_proof_verification() -> Weight {
    // Verification time is around 746_340_000 pico seconds
    // Generated by the `invalid_bundle_inherent_extrinsic_fraud_proof_verification` bench
    Weight::from_parts(746_340_000, 0)
}

fn invalid_bundle_weight_fraud_proof_verification() -> Weight {
    // Verification time is around 761_690_000 pico seconds
    // Generated by the `invalid_bundle_weight_fraud_proof_verification` bench
    Weight::from_parts(761_690_000, 0)
}
