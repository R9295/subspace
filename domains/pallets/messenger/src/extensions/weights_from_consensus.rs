
//! Autogenerated weights for `pallet_messenger_from_consensus_extension`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.0.0
//! DATE: 2025-05-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `macmini`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/release/subspace-node
// domain
// benchmark
// pallet
// --runtime=./target/release/wbuild/evm-domain-runtime/evm_domain_runtime.compact.compressed.wasm
// --genesis-builder=none
// --steps=50
// --repeat=20
// --pallet=pallet_messenger_from_consensus_extension
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./domains/pallets/messenger/src/extensions/weights_from_consensus.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;
use crate::extensions::weights::FromConsensusWeightInfo;

/// Weight functions for `pallet_messenger_from_consensus_extension`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> FromConsensusWeightInfo for WeightInfo<T> {
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SelfDomainId::SelfDomainId` (r:1 w:0)
	/// Proof: `SelfDomainId::SelfDomainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::NextChannelId` (r:1 w:1)
	/// Proof: `Messenger::NextChannelId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::Inbox` (r:0 w:1)
	/// Proof: `Messenger::Inbox` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn from_consensus_relay_message_channel_open() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `48`
		//  Estimated: `3513`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(30_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3513))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SelfDomainId::SelfDomainId` (r:1 w:0)
	/// Proof: `SelfDomainId::SelfDomainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::NextChannelId` (r:1 w:0)
	/// Proof: `Messenger::NextChannelId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::Inbox` (r:0 w:1)
	/// Proof: `Messenger::Inbox` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn from_consensus_relay_message() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `317`
		//  Estimated: `3782`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(28_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3782))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SelfDomainId::SelfDomainId` (r:1 w:0)
	/// Proof: `SelfDomainId::SelfDomainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::NextChannelId` (r:1 w:0)
	/// Proof: `Messenger::NextChannelId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::OutboxResponses` (r:0 w:1)
	/// Proof: `Messenger::OutboxResponses` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::EventSegments` (r:0 w:1)
	/// Proof: `System::EventSegments` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn from_consensus_relay_message_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `301`
		//  Estimated: `3766`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(25_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3766))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}
