##
# This action runs Trivy container and repository vulnerability
# scanner for Docker images and filesystem.
##

name: trivy-security-scan

on:
  repository_dispatch:
    types: [trivy-scan-dispatch]

jobs:
  wait-for-image:
    runs-on: ubuntu-latest
    outputs:
      image-available: ${{ steps.check-image.outputs.available }}
    steps:
      - name: Check Docker image availability with retry
        run: |
          image="${{ github.event.client_payload.image }}"
          timeout=900 # Timeout in seconds (15 minutes)
          interval=300 # Interval between retries in seconds (5 minutes)
          retry_limit=5 # Number of retries
          attempt=0

          while ! docker pull $image; do
            attempt=$((attempt + 1))
            if [ "$attempt" -gt "$retry_limit" ]; then
              echo "Image $image is not available after $retry_limit attempts."
              echo "::set-output name=available::false"
              exit 1
            fi

            echo "Attempt $attempt: Waiting for $image to be available. Retrying in $interval seconds..."
            sleep $interval
          done

          echo "$image is now available."
          echo "::set-output name=available::true"
        shell: bash

  check-trivy-db-cache:
    needs: wait-for-image
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-trivy-db.outputs.cache-hit }}
      date: ${{ steps.date.outputs.date }}
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Check Trivy DB cache
        id: cache-trivy-db
        uses: actions/cache@v4
        with:
          path: .cache/trivy
          key: cache-trivy-${{ steps.date.outputs.date }}

  update-trivy-db:
    needs: check-trivy-db-cache
    if: needs.check-trivy-db-cache.outputs.cache-hit != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Setup oras
        uses: oras-project/setup-oras@9c92598691bfef1424de2f8fae81941568f5889c # v1.21

      - name: Download and extract the vulnerability DB
        run: |
          mkdir -p .cache/trivy/db
          oras pull ghcr.io/aquasecurity/trivy-db:2
          tar -xzf db.tar.gz -C .cache/trivy/db
          rm db.tar.gz

      - name: Cache DBs
        uses: actions/cache@v4
        with:
          path: .cache/trivy
          key: cache-trivy-${{ needs.check-trivy-db-cache.outputs.date }}

  trivy_scan_image:
    needs: [check-trivy-db-cache, wait-for-image]
    if: needs.wait-for-image.outputs.image-available == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Restore Trivy DB cache
        uses: actions/cache@v4
        with:
          path: .cache/trivy
          key: cache-trivy-${{ needs.check-trivy-db-cache.outputs.date }}

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # v0.28.0
        with:
          image-ref: ${{ github.event.client_payload.image }}
          cache: 'true'
          format: "sarif"
          output: "trivy-results.sarif"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@4759df8df70c5ebe7042c3029bbace20eee13edd # v2.23.1
        with:
          sarif_file: "trivy-results.sarif"

  trivy_scan_repo:
    needs: [check-trivy-db-cache, wait-for-image]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Restore Trivy DB cache
        uses: actions/cache@v4
        with:
          path: .cache/trivy
          key: cache-trivy-${{ needs.check-trivy-db-cache.outputs.date }}

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # v0.28.0
        with:
          scan-type: fs
          cache: 'true'
          ignore-unfixed: true
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@1b1aada464948af03b950897e5eb522f92603cc2 # v3.24.9
        with:
          sarif_file: "trivy-results.sarif"
